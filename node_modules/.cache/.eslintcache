[{"C:\\Projects\\password-gen\\src\\index.js":"1","C:\\Projects\\password-gen\\src\\App.js":"2","C:\\Projects\\password-gen\\src\\Generator.js":"3","C:\\Projects\\password-gen\\src\\reportWebVitals.js":"4"},{"size":535,"mtime":1669721703001,"results":"5","hashOfConfig":"6"},{"size":227,"mtime":1670936194968,"results":"7","hashOfConfig":"6"},{"size":7697,"mtime":1670933956797,"results":"8","hashOfConfig":"6"},{"size":364,"mtime":1670936435387,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1qjbjnt",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\password-gen\\src\\index.js",[],[],[],"C:\\Projects\\password-gen\\src\\App.js",[],[],"C:\\Projects\\password-gen\\src\\Generator.js",["24"],[],"import \"./Generator.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport ContentPasteIcon from \"@mui/icons-material/ContentPaste\";\r\n\r\nconst Generator = () => {\r\n  const [password, setpassword] = useState(\"\");\r\n  const [checkedUpper, setcheckedUpper] = useState(false);\r\n  const [checkedLower, setcheckedLower] = useState(false);\r\n  const [checkedSymbol, setcheckedsymbol] = useState(false);\r\n  const [checkedNumber, setcheckedNumber] = useState(false);\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  const [sliderValue, setSliderValue] = useState(10);\r\n  const [passwordStrength, setpasswordStrength] = useState(\"\");\r\n\r\n  const LengthSlider = styled(Slider)({\r\n    color: \"#52af77\",\r\n    height: 8,\r\n    \"& .MuiSlider-track\": {\r\n      border: \"none\",\r\n    },\r\n    \"& .MuiSlider-thumb\": {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: \"#fff\",\r\n      border: \"2px solid currentColor\",\r\n      \"&:focus, &:hover, &.Mui-active, &.Mui-focusVisible\": {\r\n        boxShadow: \"inherit\",\r\n      },\r\n      \"&:before\": {\r\n        display: \"none\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const alphabet = [\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"Q\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n  ];\r\n\r\n  const symbols = [\"!\", \"#\", \"$\", \"%\", \"&\", \"*\", \"/\", \"-\", \"+\"];\r\n  const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  const getRandomNumber = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const handlePassword = (e) => {\r\n    e.preventDefault();\r\n    let passwordList = [];\r\n    if (password === null) {\r\n      console.log(\"nothing in window\");\r\n    } else {\r\n      while (passwordList.length < sliderValue) {\r\n        const index = getRandomNumber(0, 3);\r\n        if (index === 0 && checkedUpper === true) {\r\n          let upperLetter = handleUpperCase();\r\n          passwordList.push(upperLetter);\r\n        } else if (index === 1 && checkedLower === true) {\r\n          let lowerLetter = handleLowerCase();\r\n          passwordList.push(lowerLetter);\r\n        } else if (index === 2 && checkedSymbol === true) {\r\n          let symbol = handleSymbols();\r\n          passwordList.push(symbol);\r\n        } else if (index === 3 && checkedNumber === true) {\r\n          let numb = handleNumbers();\r\n          passwordList.push(numb);\r\n        }\r\n      }\r\n      if (password.length <= 5) {\r\n        setpasswordStrength(\"Weak\");\r\n      } else if (password.length > 5 && password.length <= 10) {\r\n        setpasswordStrength(\"Medium\");\r\n      } else if (password.length > 10) {\r\n        setpasswordStrength(\"Strong\");\r\n      }\r\n      setpassword(passwordList.join(\"\"));\r\n      setcheckedLower(false);\r\n      setcheckedUpper(false);\r\n      setcheckedNumber(false);\r\n      setcheckedsymbol(false);\r\n    }\r\n  };\r\n\r\n  const handleCopyText = () => {\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleUpperCase = () => {\r\n    setcheckedUpper(!checkedUpper);\r\n    const index = getRandomNumber(0, 25);\r\n    return alphabet[index];\r\n  };\r\n\r\n  const handleLowerCase = () => {\r\n    setcheckedLower(!checkedLower);\r\n    const index = getRandomNumber(0, 25);\r\n    return alphabet[index].toLocaleLowerCase();\r\n  };\r\n\r\n  const handleSymbols = () => {\r\n    setcheckedsymbol(!checkedSymbol);\r\n    const index = getRandomNumber(0, 8);\r\n    return symbols[index];\r\n  };\r\n\r\n  const handleNumbers = () => {\r\n    setcheckedNumber(!checkedNumber);\r\n    const index = getRandomNumber(0, 8);\r\n    return numbers[index].toString();\r\n  };\r\n\r\n  useEffect(() => {}, [password]);\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <h2>Password Generator</h2>\r\n      <div className=\"password-results\">\r\n        <h3>{password}</h3>\r\n        <CopyToClipboard text={password} onCopy={handleCopyText}>\r\n          <ContentPasteIcon className=\"copy-icon\"></ContentPasteIcon>\r\n        </CopyToClipboard>\r\n      </div>\r\n      <div className=\"password-param-col\">\r\n        <p>Charecter Length</p>\r\n        <h3>{sliderValue}</h3>\r\n      </div>\r\n      <div className=\"password-col\">\r\n        <LengthSlider\r\n          value={typeof sliderValue === \"number\" ? sliderValue : 0}\r\n          min={0}\r\n          max={30}\r\n          onChange={handleSliderChange}\r\n          aria-labelledby=\"input-slider\"\r\n        />\r\n        <form onSubmit={handlePassword}>\r\n          <fieldset className=\"form-pass\">\r\n            <label>\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                value={checkedUpper}\r\n                id=\"upper\"\r\n                onChange={handleUpperCase}\r\n                checked={checkedUpper}\r\n              ></input>\r\n              Include Uppercase Letters\r\n            </label>\r\n            <label>\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                value={checkedLower}\r\n                id=\"lower\"\r\n                onChange={handleLowerCase}\r\n                checked={checkedLower}\r\n              ></input>\r\n              Include Lowercase Letters\r\n            </label>\r\n            <label>\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                value={checkedNumber}\r\n                id=\"numbers\"\r\n                onChange={handleNumbers}\r\n                checked={checkedNumber}\r\n              ></input>\r\n              Include Numbers\r\n            </label>\r\n            <label>\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                value={checkedSymbol}\r\n                id=\"symbols\"\r\n                onChange={handleSymbols}\r\n                checked={checkedSymbol}\r\n              ></input>\r\n              Include Symbols\r\n            </label>\r\n          </fieldset>\r\n          <div className=\"password-strength\">\r\n            <div className=\"password-strength-text\">Strength</div>\r\n            <div className=\"password-strength-rating\">{passwordStrength}</div>\r\n            <div\r\n              className=\"strength-rating\"\r\n              style={{\r\n                backgroundColor: password.length >= 5 ? \"yellow\" : \"black\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              className=\"strength-rating\"\r\n              style={{\r\n                backgroundColor:\r\n                  password.length >= 5 && password.length >= 10\r\n                    ? \"yellow\"\r\n                    : \"black\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              className=\"strength-rating\"\r\n              style={{\r\n                backgroundColor:\r\n                  password.length >= 10 && password.length <= 15\r\n                    ? \"yellow\"\r\n                    : \"black\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              className=\"strength-rating\"\r\n              style={{\r\n                backgroundColor:\r\n                  password.length >= 15 && password.length <= 20\r\n                    ? \"yellow\"\r\n                    : \"black\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <button className=\"gen-button\">Generate Password</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Generator;\r\n","C:\\Projects\\password-gen\\src\\reportWebVitals.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":14,"column":10,"nodeType":"27","messageId":"28","endLine":14,"endColumn":18},"no-unused-vars","'isCopied' is assigned a value but never used.","Identifier","unusedVar"]